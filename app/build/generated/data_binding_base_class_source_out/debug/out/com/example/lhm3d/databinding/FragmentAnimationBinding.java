// Generated by view binder compiler. Do not edit!
package com.example.lhm3d.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.lhm3d.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAnimationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout controlPanel;

  @NonNull
  public final MaterialCardView loadingCard;

  @NonNull
  public final CheckBox loopCheckbox;

  @NonNull
  public final FrameLayout modelContainer;

  @NonNull
  public final View modelView;

  @NonNull
  public final MaterialButton pauseButton;

  @NonNull
  public final MaterialButton playButton;

  @NonNull
  public final LinearLayout playbackControls;

  @NonNull
  public final MaterialButton resetButton;

  @NonNull
  public final MaterialButton saveButton;

  @NonNull
  public final TextView speedLabel;

  @NonNull
  public final SeekBar speedSlider;

  @NonNull
  public final Toolbar toolbar;

  private FragmentAnimationBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout controlPanel, @NonNull MaterialCardView loadingCard,
      @NonNull CheckBox loopCheckbox, @NonNull FrameLayout modelContainer, @NonNull View modelView,
      @NonNull MaterialButton pauseButton, @NonNull MaterialButton playButton,
      @NonNull LinearLayout playbackControls, @NonNull MaterialButton resetButton,
      @NonNull MaterialButton saveButton, @NonNull TextView speedLabel,
      @NonNull SeekBar speedSlider, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.controlPanel = controlPanel;
    this.loadingCard = loadingCard;
    this.loopCheckbox = loopCheckbox;
    this.modelContainer = modelContainer;
    this.modelView = modelView;
    this.pauseButton = pauseButton;
    this.playButton = playButton;
    this.playbackControls = playbackControls;
    this.resetButton = resetButton;
    this.saveButton = saveButton;
    this.speedLabel = speedLabel;
    this.speedSlider = speedSlider;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAnimationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAnimationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_animation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAnimationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.control_panel;
      ConstraintLayout controlPanel = ViewBindings.findChildViewById(rootView, id);
      if (controlPanel == null) {
        break missingId;
      }

      id = R.id.loading_card;
      MaterialCardView loadingCard = ViewBindings.findChildViewById(rootView, id);
      if (loadingCard == null) {
        break missingId;
      }

      id = R.id.loop_checkbox;
      CheckBox loopCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (loopCheckbox == null) {
        break missingId;
      }

      id = R.id.model_container;
      FrameLayout modelContainer = ViewBindings.findChildViewById(rootView, id);
      if (modelContainer == null) {
        break missingId;
      }

      id = R.id.model_view;
      View modelView = ViewBindings.findChildViewById(rootView, id);
      if (modelView == null) {
        break missingId;
      }

      id = R.id.pause_button;
      MaterialButton pauseButton = ViewBindings.findChildViewById(rootView, id);
      if (pauseButton == null) {
        break missingId;
      }

      id = R.id.play_button;
      MaterialButton playButton = ViewBindings.findChildViewById(rootView, id);
      if (playButton == null) {
        break missingId;
      }

      id = R.id.playback_controls;
      LinearLayout playbackControls = ViewBindings.findChildViewById(rootView, id);
      if (playbackControls == null) {
        break missingId;
      }

      id = R.id.reset_button;
      MaterialButton resetButton = ViewBindings.findChildViewById(rootView, id);
      if (resetButton == null) {
        break missingId;
      }

      id = R.id.save_button;
      MaterialButton saveButton = ViewBindings.findChildViewById(rootView, id);
      if (saveButton == null) {
        break missingId;
      }

      id = R.id.speed_label;
      TextView speedLabel = ViewBindings.findChildViewById(rootView, id);
      if (speedLabel == null) {
        break missingId;
      }

      id = R.id.speed_slider;
      SeekBar speedSlider = ViewBindings.findChildViewById(rootView, id);
      if (speedSlider == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new FragmentAnimationBinding((ConstraintLayout) rootView, controlPanel, loadingCard,
          loopCheckbox, modelContainer, modelView, pauseButton, playButton, playbackControls,
          resetButton, saveButton, speedLabel, speedSlider, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
