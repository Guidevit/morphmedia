// Generated by view binder compiler. Do not edit!
package com.example.lhm3d.databinding;

import android.opengl.GLSurfaceView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.lhm3d.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAnimationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton buttonPause;

  @NonNull
  public final MaterialButton buttonPlay;

  @NonNull
  public final MaterialButton buttonReset;

  @NonNull
  public final Button buttonSaveAnimation;

  @NonNull
  public final CardView cardViewGLSurface;

  @NonNull
  public final CheckBox checkBoxLoop;

  @NonNull
  public final Chip chipDance;

  @NonNull
  public final ChipGroup chipGroupAnimations;

  @NonNull
  public final Chip chipJump;

  @NonNull
  public final Chip chipRun;

  @NonNull
  public final Chip chipWalk;

  @NonNull
  public final Chip chipWave;

  @NonNull
  public final GLSurfaceView glSurfaceView;

  @NonNull
  public final LinearLayout linearLayoutControls;

  @NonNull
  public final LinearLayout linearLayoutOptions;

  @NonNull
  public final SeekBar seekBarSpeed;

  @NonNull
  public final TextView textViewSpeed;

  @NonNull
  public final Toolbar toolbar;

  private FragmentAnimationBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton buttonPause, @NonNull MaterialButton buttonPlay,
      @NonNull MaterialButton buttonReset, @NonNull Button buttonSaveAnimation,
      @NonNull CardView cardViewGLSurface, @NonNull CheckBox checkBoxLoop, @NonNull Chip chipDance,
      @NonNull ChipGroup chipGroupAnimations, @NonNull Chip chipJump, @NonNull Chip chipRun,
      @NonNull Chip chipWalk, @NonNull Chip chipWave, @NonNull GLSurfaceView glSurfaceView,
      @NonNull LinearLayout linearLayoutControls, @NonNull LinearLayout linearLayoutOptions,
      @NonNull SeekBar seekBarSpeed, @NonNull TextView textViewSpeed, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.buttonPause = buttonPause;
    this.buttonPlay = buttonPlay;
    this.buttonReset = buttonReset;
    this.buttonSaveAnimation = buttonSaveAnimation;
    this.cardViewGLSurface = cardViewGLSurface;
    this.checkBoxLoop = checkBoxLoop;
    this.chipDance = chipDance;
    this.chipGroupAnimations = chipGroupAnimations;
    this.chipJump = chipJump;
    this.chipRun = chipRun;
    this.chipWalk = chipWalk;
    this.chipWave = chipWave;
    this.glSurfaceView = glSurfaceView;
    this.linearLayoutControls = linearLayoutControls;
    this.linearLayoutOptions = linearLayoutOptions;
    this.seekBarSpeed = seekBarSpeed;
    this.textViewSpeed = textViewSpeed;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAnimationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAnimationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_animation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAnimationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonPause;
      MaterialButton buttonPause = ViewBindings.findChildViewById(rootView, id);
      if (buttonPause == null) {
        break missingId;
      }

      id = R.id.buttonPlay;
      MaterialButton buttonPlay = ViewBindings.findChildViewById(rootView, id);
      if (buttonPlay == null) {
        break missingId;
      }

      id = R.id.buttonReset;
      MaterialButton buttonReset = ViewBindings.findChildViewById(rootView, id);
      if (buttonReset == null) {
        break missingId;
      }

      id = R.id.buttonSaveAnimation;
      Button buttonSaveAnimation = ViewBindings.findChildViewById(rootView, id);
      if (buttonSaveAnimation == null) {
        break missingId;
      }

      id = R.id.cardViewGLSurface;
      CardView cardViewGLSurface = ViewBindings.findChildViewById(rootView, id);
      if (cardViewGLSurface == null) {
        break missingId;
      }

      id = R.id.checkBoxLoop;
      CheckBox checkBoxLoop = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxLoop == null) {
        break missingId;
      }

      id = R.id.chipDance;
      Chip chipDance = ViewBindings.findChildViewById(rootView, id);
      if (chipDance == null) {
        break missingId;
      }

      id = R.id.chipGroupAnimations;
      ChipGroup chipGroupAnimations = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupAnimations == null) {
        break missingId;
      }

      id = R.id.chipJump;
      Chip chipJump = ViewBindings.findChildViewById(rootView, id);
      if (chipJump == null) {
        break missingId;
      }

      id = R.id.chipRun;
      Chip chipRun = ViewBindings.findChildViewById(rootView, id);
      if (chipRun == null) {
        break missingId;
      }

      id = R.id.chipWalk;
      Chip chipWalk = ViewBindings.findChildViewById(rootView, id);
      if (chipWalk == null) {
        break missingId;
      }

      id = R.id.chipWave;
      Chip chipWave = ViewBindings.findChildViewById(rootView, id);
      if (chipWave == null) {
        break missingId;
      }

      id = R.id.glSurfaceView;
      GLSurfaceView glSurfaceView = ViewBindings.findChildViewById(rootView, id);
      if (glSurfaceView == null) {
        break missingId;
      }

      id = R.id.linearLayoutControls;
      LinearLayout linearLayoutControls = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutControls == null) {
        break missingId;
      }

      id = R.id.linearLayoutOptions;
      LinearLayout linearLayoutOptions = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutOptions == null) {
        break missingId;
      }

      id = R.id.seekBarSpeed;
      SeekBar seekBarSpeed = ViewBindings.findChildViewById(rootView, id);
      if (seekBarSpeed == null) {
        break missingId;
      }

      id = R.id.textViewSpeed;
      TextView textViewSpeed = ViewBindings.findChildViewById(rootView, id);
      if (textViewSpeed == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new FragmentAnimationBinding((ConstraintLayout) rootView, buttonPause, buttonPlay,
          buttonReset, buttonSaveAnimation, cardViewGLSurface, checkBoxLoop, chipDance,
          chipGroupAnimations, chipJump, chipRun, chipWalk, chipWave, glSurfaceView,
          linearLayoutControls, linearLayoutOptions, seekBarSpeed, textViewSpeed, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
